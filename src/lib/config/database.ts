/**
 * Configura√ß√£o profissional do banco de dados
 * Sistema robusto para produ√ß√£o AWS Lambda + PostgreSQL
 */

import { PrismaClient } from '@prisma/client'

// Configura√ß√µes de ambiente
const isDevelopment = process.env.NODE_ENV === 'development'
const isProduction = process.env.NODE_ENV === 'production'
const isAWSLambda = !!(process.env.AWS_LAMBDA_FUNCTION_NAME || process.env.AWS_REGION)

// Valida√ß√£o de vari√°veis de ambiente obrigat√≥rias
function validateEnvironment() {
  if (isProduction && !process.env.DATABASE_URL) {
    throw new Error('DATABASE_URL √© obrigat√≥ria em produ√ß√£o')
  }
  
  if (process.env.DATABASE_URL && !process.env.DATABASE_URL.startsWith('postgresql://')) {
    throw new Error('DATABASE_URL deve ser uma conex√£o PostgreSQL v√°lida')
  }
}

// Configura√ß√µes otimizadas para diferentes ambientes
function getDatabaseConfig() {
  const baseConfig = {
    datasources: {
      db: {
        url: process.env.DATABASE_URL
      }
    }
  }

  if (isProduction && isAWSLambda) {
    // Configura√ß√£o otimizada para AWS Lambda
    return {
      ...baseConfig,
      log: ['error'] as const,
      errorFormat: 'minimal' as const,
    }
  }

  if (isDevelopment) {
    // Configura√ß√£o para desenvolvimento
    return {
      ...baseConfig,
      log: ['query', 'info', 'warn', 'error'] as const,
      errorFormat: 'pretty' as const,
    }
  }

  // Configura√ß√£o padr√£o
  return {
    ...baseConfig,
    log: ['error'] as const,
    errorFormat: 'minimal' as const,
  }
}

// Singleton global para reutiliza√ß√£o de conex√£o
declare global {
  var __prisma: PrismaClient | undefined
}

// Fun√ß√£o para criar cliente Prisma
function createPrismaClient(): PrismaClient {
  validateEnvironment()
  
  const config = getDatabaseConfig()
  console.log(`üîó [DATABASE] Inicializando Prisma Client (${process.env.NODE_ENV})`)
  
  const client = new PrismaClient(config)
  
  // Configurar handlers de conex√£o para AWS Lambda
  if (isAWSLambda) {
    // Graceful shutdown para Lambda
    process.on('beforeExit', async () => {
      console.log('üîå [DATABASE] Desconectando Prisma Client')
      await client.$disconnect()
    })
  }
  
  return client
}

// Exportar cliente singleton
export const prisma = globalThis.__prisma ?? createPrismaClient()

if (isDevelopment) {
  globalThis.__prisma = prisma
}

// Fun√ß√£o para testar conex√£o
export async function testDatabaseConnection(): Promise<boolean> {
  try {
    await prisma.$queryRaw`SELECT 1`
    console.log('‚úÖ [DATABASE] Conex√£o com banco de dados estabelecida')
    return true
  } catch (error) {
    console.error('‚ùå [DATABASE] Erro na conex√£o:', error)
    return false
  }
}

// Fun√ß√£o para desconectar (√∫til para testes)
export async function disconnectDatabase(): Promise<void> {
  await prisma.$disconnect()
}

export default prisma 