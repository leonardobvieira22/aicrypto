import '@/lib/env-runtime'
import { type NextRequest, NextResponse } from 'next/server'
import bcrypt from 'bcrypt'
import { randomUUID } from 'crypto'
import prisma from '@/lib/prisma'

// Verificar se as fun√ß√µes de valida√ß√£o existem
let validationFunctions: any = {};
try {
  const validation = require('@/lib/utils/validation');
  validationFunctions = validation;
  console.log('‚úÖ [REGISTER] Fun√ß√µes de valida√ß√£o carregadas com sucesso');
} catch (error: any) {
  console.error('‚ùå [REGISTER] Erro ao carregar fun√ß√µes de valida√ß√£o:', error.message);
  // Fallback para valida√ß√µes b√°sicas
}

// Interface para os dados de registro
interface RegisterData {
  name: string;
  email: string;
  password: string;
  confirmPassword: string;
  cpf: string;
  dateOfBirth: string;
  termsAccepted: boolean;
  privacyAccepted: boolean;
}

// Interface para erros de valida√ß√£o
interface ValidationError {
  path: string;
  message: string;
}

// Fun√ß√£o para validar email
function isValidEmail(email: string): boolean {
  if (!email || email.length > 255) return false;
  return /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/.test(email);
}

// Fun√ß√£o para validar nome
function isValidName(name: string): boolean {
  if (!name || name.length < 3 || name.length > 100) return false;
  return /^[a-zA-Z√Ä-√ø\s]+$/.test(name);
}

// Fun√ß√£o para validar senha
function isValidPassword(password: string): { isValid: boolean; errors: string[] } {
  const errors: string[] = [];
  
  if (!password) {
    errors.push('Senha √© obrigat√≥ria');
    return { isValid: false, errors };
  }
  
  if (password.length < 8) errors.push('Senha deve ter pelo menos 8 caracteres');
  if (password.length > 72) errors.push('Senha n√£o pode ter mais de 72 caracteres');
  if (!/[A-Z]/.test(password)) errors.push('Senha deve conter pelo menos uma letra mai√∫scula');
  if (!/[a-z]/.test(password)) errors.push('Senha deve conter pelo menos uma letra min√∫scula');
  if (!/[0-9]/.test(password)) errors.push('Senha deve conter pelo menos um n√∫mero');
  if (!/[^A-Za-z0-9]/.test(password)) errors.push('Senha deve conter pelo menos um caractere especial');
  
  return { isValid: errors.length === 0, errors };
}

// Fun√ß√µes de valida√ß√£o locais
function cleanCPF(cpf: string): string {
  return cpf.replace(/\D/g, '');
}

function isValidCPF(cpf: string): boolean {
  try {
    if (validationFunctions.isValidCPF) {
      return validationFunctions.isValidCPF(cpf);
    }
    // Fallback: apenas verificar se tem 11 d√≠gitos
    const cleaned = cleanCPF(cpf);
    return cleaned.length === 11 && !/^(\d)\1{10}$/.test(cleaned);
  } catch (error) {
    console.error('Erro na valida√ß√£o de CPF:', error);
    return false;
  }
}

function isAtLeast18YearsOld(date: string): boolean {
  try {
    if (validationFunctions.isAtLeast18YearsOld) {
      return validationFunctions.isAtLeast18YearsOld(date);
    }
    // Fallback: valida√ß√£o b√°sica
    const birthDate = new Date(date);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    return age >= 18;
  } catch (error) {
    console.error('Erro na valida√ß√£o de idade:', error);
    return false;
  }
}

// Fun√ß√£o para validar data de nascimento
function isValidDateOfBirth(date: string): boolean {
  try {
    const birthDate = new Date(date);
    if (isNaN(birthDate.getTime())) return false;
    return isAtLeast18YearsOld(date);
  } catch {
    return false;
  }
}

// Fun√ß√£o principal de valida√ß√£o
function validateRegisterData(data: any): { isValid: boolean; errors: ValidationError[]; data?: RegisterData } {
  const errors: ValidationError[] = [];

  // Validar estrutura b√°sica
  if (!data || typeof data !== 'object') {
    errors.push({ path: 'root', message: 'Dados inv√°lidos' });
    return { isValid: false, errors };
  }

  const {
    name,
    email,
    password,
    confirmPassword,
    cpf: rawCpf,
    dateOfBirth,
    termsAccepted,
    privacyAccepted
  } = data;

  // Validar nome
  if (!isValidName(name)) {
    if (!name) {
      errors.push({ path: 'name', message: 'Nome √© obrigat√≥rio' });
    } else if (name.length < 3) {
      errors.push({ path: 'name', message: 'Nome deve ter pelo menos 3 caracteres' });
    } else if (name.length > 100) {
      errors.push({ path: 'name', message: 'Nome n√£o pode ter mais de 100 caracteres' });
    } else {
      errors.push({ path: 'name', message: 'Nome deve conter apenas letras e espa√ßos' });
    }
  }

  // Validar email
  if (!isValidEmail(email)) {
    if (!email) {
      errors.push({ path: 'email', message: 'Email √© obrigat√≥rio' });
    } else {
      errors.push({ path: 'email', message: 'Email inv√°lido' });
    }
  }

  // Validar senha
  const passwordValidation = isValidPassword(password);
  if (!passwordValidation.isValid) {
    passwordValidation.errors.forEach(error => {
      errors.push({ path: 'password', message: error });
    });
  }

  // Validar confirma√ß√£o de senha
  if (password !== confirmPassword) {
    errors.push({ path: 'confirmPassword', message: 'As senhas n√£o coincidem' });
  }

  // Validar CPF
  if (!rawCpf) {
    errors.push({ path: 'cpf', message: 'CPF √© obrigat√≥rio' });
  } else {
    const cleanedCPF = cleanCPF(rawCpf);
    if (cleanedCPF.length !== 11) {
      errors.push({ path: 'cpf', message: 'CPF deve conter 11 d√≠gitos' });
    } else if (!isValidCPF(rawCpf)) {
      errors.push({ path: 'cpf', message: 'CPF inv√°lido' });
    }
  }

  // Validar data de nascimento
  if (!isValidDateOfBirth(dateOfBirth)) {
    if (!dateOfBirth) {
      errors.push({ path: 'dateOfBirth', message: 'Data de nascimento √© obrigat√≥ria' });
    } else {
      errors.push({ path: 'dateOfBirth', message: 'Voc√™ deve ter pelo menos 18 anos para se registrar' });
    }
  }

  // Validar termos e condi√ß√µes
  if (termsAccepted !== true) {
    errors.push({ path: 'termsAccepted', message: 'Voc√™ deve aceitar os termos e condi√ß√µes' });
  }

  // Validar pol√≠tica de privacidade
  if (privacyAccepted !== true) {
    errors.push({ path: 'privacyAccepted', message: 'Voc√™ deve aceitar a pol√≠tica de privacidade' });
  }

  if (errors.length > 0) {
    return { isValid: false, errors };
  }

  return {
    isValid: true,
    errors: [],
    data: {
      name: name.trim(),
      email: email.toLowerCase().trim(),
      password,
      confirmPassword,
      cpf: cleanCPF(rawCpf),
      dateOfBirth,
      termsAccepted,
      privacyAccepted
    }
  };
}

export async function POST(req: NextRequest) {
  console.log('üöÄ [REGISTER] Iniciando processo de registro...');
  console.log('üîç [REGISTER] Ambiente detectado:', {
    NODE_ENV: process.env.NODE_ENV,
    AWS_REGION: process.env.AWS_REGION,
    AWS_LAMBDA_FUNCTION_NAME: !!process.env.AWS_LAMBDA_FUNCTION_NAME,
    AMPLIFY_BUILD: process.env.AMPLIFY_BUILD,
    hasPostgreSQL: process.env.DATABASE_URL?.includes('postgresql://'),
    prismaExists: !!prisma
  });
  
  try {
    // Verificar limite de taxa
    const ipAddress = req.headers.get('x-forwarded-for') || 'unknown';
    console.log(`üìç [REGISTER] IP do cliente: ${ipAddress}`);
    
    // Processar corpo da requisi√ß√£o
    let body: any;
    try {
      body = await req.json();
      console.log('üì¶ [REGISTER] Corpo da requisi√ß√£o processado');
    } catch (error: any) {
      console.error('‚ùå [REGISTER] Erro ao processar JSON:', error.message);
      return NextResponse.json(
        { message: 'Formato de requisi√ß√£o inv√°lido' },
        { status: 400 }
      );
    }

    // Validar dados de entrada
    console.log('üîç [REGISTER] Iniciando valida√ß√£o de dados...');
    const validation = validateRegisterData(body);
    if (!validation.isValid) {
      console.log('‚ùå [REGISTER] Valida√ß√£o falhou:', validation.errors);
      return NextResponse.json(
        { 
          message: 'Dados de cadastro inv√°lidos', 
          errors: validation.errors 
        },
        { status: 400 }
      );
    }
    console.log('‚úÖ [REGISTER] Valida√ß√£o de dados bem-sucedida');
    
    const {
      name: sanitizedName,
      email: normalizedEmail,
      password,
      cpf,
      dateOfBirth,
      termsAccepted,
      privacyAccepted
    } = validation.data!;

    // Verificar se o usu√°rio j√° existe pelo email
    console.log('üîç [REGISTER] Verificando email existente...');
    console.log('üîç [REGISTER] Testando conex√£o Prisma...');
    console.log('üîç [REGISTER] DATABASE_URL presente:', !!process.env.DATABASE_URL);
    console.log('üîç [REGISTER] DATABASE_URL tipo:', process.env.DATABASE_URL?.substring(0, 20) + '...');
    
    try {
      // Configurar timeout espec√≠fico para AWS Lambda
      const LAMBDA_TIMEOUT = 5000; // 5 segundos
      
      console.log('üîç [REGISTER] Executando consulta de email com timeout...');
      
      // Usar Promise.race para implementar timeout manual
      const existingEmailPromise = prisma.user.findUnique({
        where: { email: normalizedEmail },
        select: { id: true, email: true } // Selecionar apenas campos necess√°rios
      });
      
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('TIMEOUT')), LAMBDA_TIMEOUT);
      });
      
      const existingEmail = await Promise.race([existingEmailPromise, timeoutPromise]) as any;

      if (existingEmail) {
        console.log('‚ùå [REGISTER] Email j√° cadastrado');
        return NextResponse.json(
          { message: 'Email j√° cadastrado' },
          { status: 400 }
        );
      }
      console.log('‚úÖ [REGISTER] Email dispon√≠vel');
    } catch (error: any) {
      console.error('‚ùå [REGISTER] Erro ao verificar email existente:', {
        message: error.message,
        code: error.code,
        name: error.name,
        stack: error.stack?.split('\n').slice(0, 3).join('\n')
      });
      
      // Se for timeout, tentar uma estrat√©gia simplificada
      if (error.message === 'TIMEOUT') {
        console.log('‚è∞ [REGISTER] Timeout na consulta - continuando sem verifica√ß√£o pr√©via de email');
        console.log('üîÑ [REGISTER] O sistema ir√° capturar duplicatas durante a cria√ß√£o do usu√°rio');
        // Continuar sem verifica√ß√£o pr√©via - o banco capturar√° duplicatas
      } else if (error.code === 'P1001' || error.message?.includes('connection')) {
        return NextResponse.json(
          { message: 'Erro de conex√£o com o banco de dados. Tente novamente em alguns instantes.' },
          { status: 503 }
        );
      } else {
        return NextResponse.json(
          { message: 'Erro ao verificar email. Tente novamente.' },
          { status: 500 }
        );
      }
    }

    // Verificar se o CPF j√° est√° cadastrado
    console.log('üîç [REGISTER] Verificando CPF existente...');
    try {
      // Usar o mesmo timeout para consist√™ncia
      const LAMBDA_TIMEOUT = 5000; // 5 segundos
      
      console.log('üîç [REGISTER] Executando consulta de CPF com timeout...');
      
      const existingCPFPromise = prisma.user.findUnique({
        where: { cpf },
        select: { id: true, cpf: true } // Selecionar apenas campos necess√°rios
      });
      
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('TIMEOUT')), LAMBDA_TIMEOUT);
      });
      
      const existingCPF = await Promise.race([existingCPFPromise, timeoutPromise]) as any;

      if (existingCPF) {
        console.log('‚ùå [REGISTER] CPF j√° cadastrado');
        return NextResponse.json(
          { message: 'CPF j√° cadastrado' },
          { status: 400 }
        );
      }
      console.log('‚úÖ [REGISTER] CPF dispon√≠vel');
    } catch (error: any) {
      console.error('‚ùå [REGISTER] Erro ao verificar CPF existente:', {
        message: error.message,
        code: error.code,
        name: error.name
      });
      
      // Se for timeout, continuar sem verifica√ß√£o pr√©via
      if (error.message === 'TIMEOUT') {
        console.log('‚è∞ [REGISTER] Timeout na consulta de CPF - continuando sem verifica√ß√£o pr√©via');
        console.log('üîÑ [REGISTER] O sistema ir√° capturar duplicatas durante a cria√ß√£o do usu√°rio');
        // Continuar sem verifica√ß√£o pr√©via - o banco capturar√° duplicatas
      } else if (error.code === 'P1001' || error.message?.includes('connection')) {
        return NextResponse.json(
          { message: 'Erro de conex√£o com o banco de dados. Tente novamente em alguns instantes.' },
          { status: 503 }
        );
      } else {
        return NextResponse.json(
          { message: 'Erro ao verificar CPF. Tente novamente.' },
          { status: 500 }
        );
      }
    }

    // Hash da senha
    console.log('üîç [REGISTER] Gerando hash da senha...');
    let hashedPassword: string;
    try {
      hashedPassword = await bcrypt.hash(password, 12);
      console.log('‚úÖ [REGISTER] Hash de senha criado com sucesso');
    } catch (error: any) {
      console.error('‚ùå [REGISTER] Erro ao gerar hash da senha:', error);
      return NextResponse.json(
        { message: 'Erro ao processar senha' },
        { status: 500 }
      );
    }

    // Gerar token criptograficamente seguro
    const verificationToken = randomUUID();
    console.log('‚úÖ [REGISTER] Token de verifica√ß√£o gerado');
    
    // Criar usu√°rio em transa√ß√£o para garantir consist√™ncia
    let user: any;
    try {
      console.log('üíæ [REGISTER] Iniciando transa√ß√£o do banco de dados...');
      
      user = await prisma.$transaction(async (tx: any) => {
        console.log('üë§ [REGISTER] Criando usu√°rio...');
        
        // Criar usu√°rio
        const newUser = await tx.user.create({
          data: {
            name: sanitizedName,
            email: normalizedEmail,
            password: hashedPassword,
            cpf,
            dateOfBirth: new Date(dateOfBirth),
            termsAccepted,
            privacyAccepted,
            isActive: true,
            // Criar token de verifica√ß√£o de email
            emailVerificationToken: verificationToken,
            emailVerificationExpires: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 horas
          },
        });
        
        console.log(`‚úÖ [REGISTER] Usu√°rio criado: ${newUser.id}`);
        
        console.log('‚öôÔ∏è [REGISTER] Criando configura√ß√µes de trading...');
        
        // Criar configura√ß√µes padr√£o para o usu√°rio
        await tx.tradingSetting.create({
          data: {
            userId: newUser.id,
            riskLevel: 'MEDIUM',
            defaultOrderSize: 5.0,
            maxOpenPositions: 5,
            defaultLeverage: 1.0,
            enableStopLoss: true,
            stopLossPercentage: 5.0,
            enableTakeProfit: true,
            takeProfitPercentage: 15.0,
            tradingPairs: ['BTCUSDT', 'ETHUSDT', 'BNBUSDT'],
          },
        });

        console.log('üí∞ [REGISTER] Criando carteira de paper trading...');

        // Criar carteira de paper trading para o usu√°rio
        await tx.paperTradingWallet.create({
          data: {
            userId: newUser.id,
            balance: 10000.0,
            equity: 10000.0,
            openPositionsJson: JSON.stringify([]),
            historyJson: JSON.stringify([]),
          },
        });

        console.log('üîî [REGISTER] Criando prefer√™ncias de notifica√ß√£o...');

        // Criar prefer√™ncias de notifica√ß√£o para o usu√°rio
        await tx.notificationPreferences.create({
          data: {
            userId: newUser.id,
            emailEnabled: true,
            pushEnabled: true,
            smsEnabled: false,
            emailFrequency: 'INSTANT',
            marketUpdates: true,
            tradeAlerts: true,
            securityAlerts: true,
            newsAlerts: false,
            priceAlerts: true,
            robotAlerts: true,
            subscriptionAlerts: true,
            quietHoursEnabled: false,
            timezone: 'UTC',
          },
        });
        
        console.log('üéâ [REGISTER] Transa√ß√£o conclu√≠da com sucesso!');
        return newUser;
      });

      console.log(`‚úÖ [REGISTER] Usu√°rio registrado no banco: ${user.email} (ID: ${user.id})`);

    } catch (dbError: any) {
      console.error('‚ùå [REGISTER] Erro de banco de dados ao criar usu√°rio:', {
        message: dbError.message,
        code: dbError.code,
        meta: dbError.meta,
        stack: dbError.stack?.split('\n').slice(0, 5).join('\n')
      });
      
      // Verificar tipos espec√≠ficos de erro
      if (dbError.code === 'P2002') {
        return NextResponse.json(
          { message: 'Email ou CPF j√° cadastrado' },
          { status: 400 }
        );
      }
      
      if (dbError.code === 'P1001') {
        return NextResponse.json(
          { message: 'Erro de conex√£o com o banco de dados. Tente novamente em alguns instantes.' },
          { status: 503 }
        );
      }
      
      return NextResponse.json(
        { message: 'Erro ao criar usu√°rio. Por favor, tente novamente.' },
        { status: 500 }
      );
    }

    // Enviar email de verifica√ß√£o de forma ass√≠ncrona (n√£o bloquear o registro)
    // Executar em background para n√£o afetar a resposta ao usu√°rio
    setImmediate(async () => {
      try {
        console.log('üìß [REGISTER] Tentando enviar email de verifica√ß√£o...');
        const { emailService } = await import('@/lib/services/emailService');

        // Construir a URL de verifica√ß√£o
        const appUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
        const verificationUrl = `${appUrl}/auth/verify-email?token=${verificationToken}&email=${encodeURIComponent(normalizedEmail)}`;
    
        // Enviar email de verifica√ß√£o
        await emailService.sendVerificationEmail({
          to: normalizedEmail,
          name: sanitizedName || 'Usu√°rio',
          verificationUrl,
          userId: user.id
        });

        console.log('‚úÖ [REGISTER] Email de verifica√ß√£o enviado com sucesso (background)');

      } catch (emailError: any) {
        console.error('‚ö†Ô∏è [REGISTER] Erro ao enviar email de verifica√ß√£o (background):', emailError);
        // Email falhou, mas n√£o afeta o registro do usu√°rio
      }
    });

    // Remover a senha e o token de verifica√ß√£o do objeto de retorno
    const { password: __, emailVerificationToken: ___, ...userWithoutSensitiveData } = user;
  
    return NextResponse.json(
      {
        message: 'Usu√°rio criado com sucesso. Por favor, verifique seu email para ativar sua conta.',
        user: userWithoutSensitiveData,
        requiresEmailVerification: true,
      },
      { status: 201 }
    );

  } catch (error: any) {
    console.error('‚ùå [REGISTER] Erro geral ao registrar usu√°rio:', {
      message: error.message,
      stack: error.stack?.split('\n').slice(0, 10).join('\n')
    });
    return NextResponse.json(
      { message: 'Erro interno ao processar sua solicita√ß√£o' },
      { status: 500 }
    );
  }
}
