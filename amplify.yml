version: 1
frontend:
  phases:
    preBuild:
      commands:
        - echo "🚀 Iniciando preBuild do AI Crypto Trading..."
        - echo "📦 Versão do Node.js:" && node --version
        - echo "📦 Versão do npm:" && npm --version
        
        # Configurar Git de forma segura
        - echo "🔧 Configurando Git..."
        - git config --global user.email "build@amplify.com" || echo "Git config falhou, continuando..."
        - git config --global user.name "Amplify Build" || echo "Git config falhou, continuando..."
        
        # Instalar Bun globalmente
        - echo "📦 Instalando Bun..."
        - npm install -g bun || (echo "⚠️ Falha ao instalar Bun, usando npm..." && export USE_NPM=true)
        
        # Verificar e validar variáveis de ambiente essenciais
        - echo "🔐 Verificando variáveis de ambiente..."
        - |
          echo "=== VERIFICAÇÃO DE VARIÁVEIS DE AMBIENTE ==="
          echo "DATABASE_URL: ${DATABASE_URL:0:20}..." # Mostra apenas os primeiros 20 caracteres por segurança
          echo "NEXTAUTH_URL: $NEXTAUTH_URL"
          echo "NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:0:10}..." # Mostra apenas os primeiros 10 caracteres
          echo "ADMIN_EMAIL: $ADMIN_EMAIL"
          echo "NEXT_PUBLIC_BINANCE_API_KEY: ${NEXT_PUBLIC_BINANCE_API_KEY:0:10}..."
          echo "MAILERSEND_API_TOKEN: ${MAILERSEND_API_TOKEN:0:10}..."
          echo "JWT_SECRET: ${JWT_SECRET:0:10}..."
          echo "============================================="
        
        # Configurar NEXTAUTH_URL automaticamente se não estiver definida
        - |
          if [ -z "$NEXTAUTH_URL" ]; then
            echo "⚠️ NEXTAUTH_URL não configurada, configurando automaticamente..."
            # Obter a URL do Amplify automaticamente
            if [ ! -z "$AWS_APP_ID" ]; then
              export NEXTAUTH_URL="https://$AWS_BRANCH_NAME.$AWS_APP_ID.amplifyapp.com"
              echo "✅ NEXTAUTH_URL configurada como: $NEXTAUTH_URL"
            else
              echo "❌ ERRO: Não foi possível configurar NEXTAUTH_URL automaticamente"
              export NEXTAUTH_URL="https://main.d34l4lklofiz4e.amplifyapp.com"
              echo "⚠️ Usando NEXTAUTH_URL padrão: $NEXTAUTH_URL"
            fi
          else
            echo "✅ NEXTAUTH_URL já configurada: $NEXTAUTH_URL"
          fi
        
        # Validação obrigatória das variáveis críticas
        - |
          if [ -z "$DATABASE_URL" ]; then
            echo "❌ ERRO CRÍTICO: DATABASE_URL não configurada"
            exit 1
          else
            echo "✅ DATABASE_URL configurada"
          fi
        - |
          if [ -z "$NEXTAUTH_SECRET" ]; then
            echo "❌ ERRO CRÍTICO: NEXTAUTH_SECRET não configurada"
            exit 1
          else
            echo "✅ NEXTAUTH_SECRET configurada"
          fi
        - |
          if [ -z "$JWT_SECRET" ]; then
            echo "❌ ERRO CRÍTICO: JWT_SECRET não configurada"
            exit 1
          else
            echo "✅ JWT_SECRET configurada"
          fi
        
        # Criar arquivo .env.production com todas as variáveis necessárias
        - echo "📝 Criando arquivo .env.production..."
        - |
          cat > .env.production << EOF
          # Configuração de Produção - AWS Amplify
          NODE_ENV=production
          
          # Banco de Dados
          DATABASE_URL=$DATABASE_URL
          
          # NextAuth.js
          NEXTAUTH_URL=$NEXTAUTH_URL
          NEXTAUTH_SECRET=$NEXTAUTH_SECRET
          
          # JWT
          JWT_SECRET=$JWT_SECRET
          
          # Email
          MAILERSEND_API_TOKEN=$MAILERSEND_API_TOKEN
          ADMIN_EMAIL=$ADMIN_EMAIL
          
          # Binance API
          NEXT_PUBLIC_BINANCE_API_KEY=$NEXT_PUBLIC_BINANCE_API_KEY
          BINANCE_API_SECRET=$BINANCE_API_SECRET
          
          # URLs Públicas
          NEXT_PUBLIC_APP_URL=$NEXTAUTH_URL
          
          # Build Config
          NEXT_TELEMETRY_DISABLED=1
          AWS_AMPLIFY_BUILD=true
          NEXT_PHASE=phase-production-build
          EOF
        
        - echo "📄 Conteúdo de .env.production criado:"
        - cat .env.production
        
        # Instalar dependências
        - echo "📦 Instalando dependências..."
        - |
          if [ "$USE_NPM" = "true" ]; then
            npm ci --production=false
          else
            bun install --frozen-lockfile || npm ci --production=false
          fi
        
        # Gerar Prisma Client para produção
        - echo "🗄️ Configurando Prisma para produção..."
        - |
          echo "Gerando Prisma Client..."
          npx prisma generate || {
            echo "❌ Erro ao gerar Prisma Client"
            exit 1
          }
          echo "✅ Prisma Client gerado com sucesso"
        
        - echo "✅ preBuild concluído com sucesso!"
        
    build:
      commands:
        - echo "🏗️ Iniciando build do Next.js..."
        
        # Verificar versões
        - echo "📦 Verificando ambiente de build..."
        - npx next --version || echo "Next.js não encontrado"
        - echo "🔧 Node.js:" && node --version
        
        # Configurações de otimização para AWS Lambda
        - echo "⚙️ Configurando otimizações para AWS Lambda..."
        - export NODE_OPTIONS="--max-old-space-size=4096"
        - export NEXT_TELEMETRY_DISABLED=1
        - export AWS_AMPLIFY_BUILD=true
        - export NEXT_PHASE=phase-production-build
        
        # Verificar se o arquivo .env.production existe
        - |
          if [ ! -f ".env.production" ]; then
            echo "❌ ERRO: Arquivo .env.production não encontrado"
            exit 1
          fi
        
        # Build da aplicação
        - echo "🏗️ Executando build do Next.js..."
        - |
          if [ "$USE_NPM" = "true" ]; then
            npm run build
          else
            bun run build || npm run build
          fi
        
        # Verificar se o build foi bem-sucedido
        - echo "✅ Verificando resultado do build..."
        - |
          if [ ! -d ".next" ]; then
            echo "❌ ERRO: Build falhou - diretório .next não encontrado"
            ls -la
            exit 1
          fi
        - |
          if [ ! -f ".next/BUILD_ID" ]; then
            echo "❌ ERRO: Build incompleto - BUILD_ID não encontrado"
            ls -la .next/
            exit 1
          fi
        
        - echo "✅ Build concluído com sucesso!"
        - echo "📊 Estatísticas do build:"
        - du -sh .next/
        - echo "📁 Arquivos gerados:"
        - find .next -name "*.js" -o -name "*.css" | head -10
        
  artifacts:
    baseDirectory: .next
    files:
      - '**/*'
  cache:
    paths:
      - node_modules/**/*
      - .next/cache/**/*
      - ~/.bun/install/cache/**/*
